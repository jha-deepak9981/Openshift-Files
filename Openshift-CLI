oc login https://master.openshift.com:8443
oc get project
oc new-project test-cli
oc new-app centos/ruby-22-centos7~https://github.com/openshift/ruby-ex.git
oc new-app python~https://github.com/jha-deepak9981/python-flask-docker-hello-world.git
oc new-app --docker-image=workstation.lab.example.com:5000/openshift/hello-openshift --insecure-registry --name=hello
oc logs -f bc/ruby-ex
oc status
oc expose svc/ruby-ex
oc expose svc/ruby-ex --hostname=app2.openshift.com

Managing Openshift by CLI - Get
=============================================
[root@master ~]# oc get
You must specify the type of resource to get. Valid resource types include:

  * all
  * buildconfigs (aka 'bc')
  * builds
  * certificatesigningrequests (aka 'csr')
  * clusterrolebindings
  * clusterroles
[root@master ~]# oc get all

[root@master ~]# oc get route
NAME      HOST/PORT            PATH      SERVICES   PORT       TERMINATION   WILDCARD
ruby-ex   app2.openshift.com             ruby-ex    8080-tcp                 None

[root@master ~]# oc get imagestreams
NAME              DOCKER REPO                                                 TAGS      UPDATED
ruby-22-centos7   docker-registry.default.svc:5000/test-cli/ruby-22-centos7   latest    40 minutes ago

[root@master ~]# oc get dc
NAME      REVISION   DESIRED   CURRENT   TRIGGERED BY
ruby-ex   1          1         1         config,image(ruby-ex:latest)
[root@master ~]#

[root@master ~]# oc get bc
NAME      TYPE      FROM      LATEST
ruby-ex   Source    Git       1

[root@master ~]# oc get pod
NAME              READY     STATUS      RESTARTS   AGE
ruby-ex-1-build   0/1       Completed   0          16m
ruby-ex-1-hh4xr   1/1       Running     0          10m

[root@master ~]# oc get pod -o wide
NAME              READY     STATUS      RESTARTS   AGE       IP            NODE
ruby-ex-1-build   0/1       Completed   0          16m       10.130.0.94   node2.openshift.com
ruby-ex-1-hh4xr   1/1       Running     0          10m       10.130.0.95   node2.openshift.com

[root@master ~]# oc get svc
NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
ruby-ex   ClusterIP   172.30.54.207   <none>        8080/TCP   17m

[root@master ~]# oc get dc
NAME      REVISION   DESIRED   CURRENT   TRIGGERED BY
ruby-ex   1          2         2         config,image(ruby-ex:latest)

[root@master ~]# oc get pod -o wide
NAME              READY     STATUS              RESTARTS   AGE       IP            NODE
ruby-ex-1-5msqd   0/1       Running   0          4m        5m        10.130.0.97   node1.openshift.com
ruby-ex-1-build   0/1       Completed           0          29m       10.130.0.94   node2.openshift.com
ruby-ex-1-hh4xr   1/1       Running             0          23m       10.130.0.95   node2.openshift.com

[root@master ~]# oc get event -n secure-route
LAST SEEN   FIRST SEEN   COUNT     NAME                                            KIND                    SUBOBJECT                                TYPE      REASON                  SOURCE                         MESSAGE
58m         58m          1         simple-webapp-color-1-build.15dd3b137e849a9e    Pod                                                              Normal    Scheduled               default-scheduler              Successfully assigned simple-webapp-color-1-build to node1.openshift.com


Managing Openshift by CLI - Scale
======================================
[root@master ~]# oc scale dc/ruby-ex --replicas=2
deploymentconfig "ruby-ex" scaled

Managing Openshift by CLI - delete
======================================
[root@master ~]# oc delete pod <Pod name>
pod "ruby-ex-1-hh4xr" deleted

[root@master ~]# oc delete bc ruby-ex
buildconfig "ruby-ex" deleted

[root@master ~]# oc delete dc ruby-ex
deploymentconfig "ruby-ex" deleted

[root@master ~]# oc delete svc ruby-ex
service "ruby-ex" deleted

[root@master ~]# oc delete route ruby-ex
route "ruby-ex" deleted

[root@master ~]# oc delete imagestreams ruby-ex
imagestream "ruby-ex" deleted

[root@master ~]# oc delete project test-cli
project "test-cli" deleted

Managing Openshift by CLI - describe
======================================
[root@master ~]# oc describe node master
[root@master ~]# oc describe node infra
[root@master ~]# oc describe node node1
[root@master ~]# oc describe node node2
[root@master ~]# oc describe pod simple-webapp-color-1-lwh4t
[root@master ~]# oc describe svc ruby-ex
Name:              ruby-ex
Namespace:         test-cli
Labels:            app=ruby-ex
Annotations:       openshift.io/generated-by=OpenShiftNewApp
Selector:          app=ruby-ex,deploymentconfig=ruby-ex
Type:              ClusterIP
IP:                172.30.54.207
Port:              8080-tcp  8080/TCP
TargetPort:        8080/TCP
Endpoints:         10.130.0.95:8080
Session Affinity:  None
Events:            <none>

Managing Openshift by CLI - exec
======================================
[root@master ~]# oc exec simple-webapp-color-1-lwh4t cat /etc/resolv.conf
[root@master ~]# oc exec simple-webapp-color-1-lwh4t bash

Managing Openshift by CLI - export
======================================
[root@master ~]# oc export pod simple-webapp-color-1-lwh4t
[root@master ~]# oc export svc simple-webapp-color

Managing Openshift by CLI - apply
======================================
[root@master ~]# oc apply -f Imagestream-template.yml
buildconfig "python-web-site-docker" created

Managing Openshift by CLI - rsh 
======================================
[root@master ~]# oc rsh simple-webapp-color-1-lwh4t (pod name)

Managing Openshift by CLI - rsync
======================================
[root@master ~]# oc rsync simple-webapp-color-1-lwh4t:/opt/app-root /tmp (pod:dir-name local-dir)

Managing Openshift by CLI - cp
======================================
[root@master ~]# oc cp ansible simple-webapp-color-1-lwh4t:/tmp (local-dir to pod:dir-name), rsync also can be used here

Secure Route
==========================================
Create key, CSR and certificate
# openssl genrsa -out openshift.key 2048
# openssl req -new -key openshift.key -out openshift.csr
# openssl x509 -req -days 366 -in example.csr -signkey openshift.key -out openshift.crt

Create project and lunch application
# oc project secure-route
# oc new-app python~https://github.com/jha-deepak9981/simple-webapp-color.git
# oc logs -f bc/simple-webapp-color

Create unsecure route
# oc get svc
# oc create route --service=simple-webapp-color --hostname=app1.openshift.com

Access by POD IP or route IP
oc get pods -o wide
# curl http://10.130.0.105:8080
# curl http://app1.openshift.com

Create secure route
# oc get route
# oc delete route simple-webapp-color
# oc create route edge --service=simple-webapp-color --hostname=app1.openshift.com --key=openshift.key --cert=openshift.crt
# oc get route
# curl http://10.130.0.105:8080 (It will open because it is edge termination)
# curl https://app1.openshift.com

=====================================================
Use Case 1 - We do not want to push the docker images in openshift registry and do not want to use imagestream, as fully docker images is prepared and placed in private docker registry
Step1: a) Set private registry as insecure registry on all worker nodes
grep insecure /etc/sysconfig/docker
INSECURE_REGISTRY='--insecure-registry 172.24.0.150:5000'
Step2: Restart docker service on worker nodes
Step3: Download template file and modify the image name and them import it

=====================================================
Use Case 2 - We do not want to push the docker images in openshift registry and we would like to create imagestream, as fully docker images is prepared and placed in private docker registry
Step1: a) Set private registry as insecure registry on all worker nodes
grep insecure /etc/sysconfig/docker
INSECURE_REGISTRY='--insecure-registry 172.24.0.150:5000'
Step2: Restart docker service on worker nodes
Step3: oc import-image sample-app --from=172.24.0.150:5000/sample-python --confirm --insecure=true (It will create image stream)
Step4: oc new-app --image-stream=sample-app (It will deploy by image stream)


========================================================
1. Get the Project List and set default project 'default' 

[root@master ~]# oc get projects 
[root@master ~]# oc project default

2. Get the list of Pods 

[root@master ~]# oc get pods

NAME                       READY     STATUS    RESTARTS   AGE
docker-registry-1-6gr55    1/1       Running   1          4d
registry-console-1-jllcb   1/1       Running   1          4d
router-1-kgkcg             1/1       Running   1          4d


3. verify the registry Pod have persistent volume or not 

[root@master ~]# oc describe pod docker-registry-1-6gr55 | grep -A 2 'Volumes'

Volumes:
  registry-storage:
    Type:    EmptyDir (a temporary directory that shares a pod's lifetime)

	
[root@master ~]# oc set volume pod docker-registry-1-6gr55

pods/docker-registry-1-6gr55
  empty directory as registry-storage		## see here, it's an empty directory as registry storage ##
    mounted at /registry
  secret/registry-certificates as registry-certificates
    mounted at /etc/secrets
  secret/registry-token-8hjkp as registry-token-8hjkp
    mounted at /var/run/secrets/kubernetes.io/serviceaccount

4. Configure NFS Server to share persistent Storage for registry Pod 

[root@nfs ~]# yum install nfs-utils -y

[root@nfs ~]# mkdir -p /shares/registry
[root@nfs ~]# chmod o+rwx /shares/registry/

   
[root@nfs ~]# echo "/shares/registry   192.168.0.0/24(rw,sync)" >> /etc/exports
   
[root@nfs ~]# cat /etc/exports
/shares/registry   192.168.0.0/24(rw,sync)
   
[root@nfs ~]# systemctl start nfs-server
[root@nfs ~]# systemctl enable nfs-server

[root@nfs ~]# showmount -e
   
Export list for nfs.openshift.example.com:
/shares/registry 192.168.0.0/24
	
5. Now go to OpenShift Master node and Get NFS Share and Deployment Config details 

[root@master ~]# showmount -e nfs.openshift.example.com

Export list for nfs.openshift.example.com:
/shares/registry 192.168.0.0/24


[root@master ~]# oc get dc

NAME               REVISION   DESIRED   CURRENT   TRIGGERED BY
docker-registry    1          1         1         config
registry-console   1          1         1         config
router             1          1         1         config


6. Create a YAML file to configure persistent volume 

[root@master ~]# vim registry-volume.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: registry-volume
spec:
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteMany
  nfs:
    path: /shares/registry
    server: nfs.openshift.example.com
  persistentVolumeReclaimPolicy: Recycle
  claimRef:
    name: registry-pvclaim
    namespace: default

:wq (save and exit) 

[root@master ~]# oc create -f registry-volume.yaml
persistentvolume "registry-volume" created

[root@master ~]# oc get pv
NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                      STORAGECLASS   REASON    AGE
registry-volume   5Gi        RWX            Recycle          Available   default/registry-pvclaim                            10s


7. Claim the persistent volume for registry Pod


[root@master ~]# oc get pods
NAME                       READY     STATUS    RESTARTS   AGE
docker-registry-1-2rlzj    1/1       Running   0          28m
registry-console-1-nlrf8   1/1       Running   0          28m
router-1-f8m7j             1/1       Running   0          28m

[root@master ~]# oc get dc
NAME               REVISION   DESIRED   CURRENT   TRIGGERED BY
docker-registry    1          1         1         config
registry-console   1          1         1         config
router             1          1         1         config


[root@master ~]# oc set volume dc/docker-registry -n default --add --overwrite --name=registry-storage -t pvc --claim-name=registry-pvclaim --claim-size=5Gi --claim-mode='ReadWritemany'

persistentvolumeclaims/registry-pvclaim
deploymentconfig "docker-registry" updated


[root@master ~]# oc get pvc
NAME               STATUS    VOLUME            CAPACITY   ACCESS MODES   STORAGECLASS   AGE
registry-pvclaim   Bound     registry-volume   5Gi        RWX                           29s

[root@master ~]# oc get pv
NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                      STORAGECLASS   REASON    AGE
registry-volume   5Gi        RWX            Recycle          Bound     default/registry-pvclaim                            2m

[root@master ~]# oc get pods
NAME                       READY     STATUS    RESTARTS   AGE
docker-registry-2-cw6s9    1/1       Running   0          1m			# Compare docker-registry Pod ID with previous pod list 
registry-console-1-nlrf8   1/1       Running   0          31m
router-1-f8m7j             1/1       Running   0          31m


[root@master ~]# oc describe pod docker-registry-2-cw6s9


[root@master ~]# oc set volume pod docker-registry-2-cw6s9

pods/docker-registry-2-cw6s9
  secret/registry-certificates as registry-certificates
    mounted at /etc/secrets
  pvc/registry-pvclaim (allocated 5GiB) as registry-storage
    mounted at /registry
  secret/registry-token-8hjkp as registry-token-8hjkp
    mounted at /var/run/secrets/kubernetes.io/serviceaccount

	
8. Verify that the registry is using the NFS share to save container images.

Create a new project named registry-storage:

[root@nfs ~]# ls -l /shares/registry/

Now Open Web Browser and point to the following URL to access OpenShift Dashboard: 

Login to OpenShift Dashboard : https://master.openshift.example.com:8443/

Username : admin
Password : Pas$$w0rd

Click on "+ Create Project" 

Name: registry-storage-project

Display Name registry storage project

Description: registry storage project


Now Select registry storage project -> Brows Catalog -> PHP -> Next -> 

Version: 7.0 - latest
Application Name: rgtest
Git Repositories: https://github.com/sureshchandrarhca15/openshift-php-hello-world.git

Create -> Close. 

Now click on Overview and expend rgtest App for more details. 

You have to wait till build successfully completed. Once completed, you will have a running pod from it. 

Now go back to CLI Console on master node, and do the following to verify the pod. 

[root@master ~]# oc get pods -n registry-storage-project -o wide
NAME              READY     STATUS      RESTARTS   AGE       IP            NODE
regtest-1-442wk   1/1       Running     0          2m        10.131.0.25   node2.openshift.example.com
regtest-1-build   0/1       Completed   0          4m        10.131.0.24   node2.openshift.example.com

Now go back to NFS Server and check the share for registry Images 

[root@localhost ~]# ls -l /shares/registry/
total 0
drwxr-xr-x 3 1000000000 nfsnobody 22 Oct 21 14:14 docker

[root@localhost ~]# ls -l /shares/registry/docker/registry/v2/repositories/
total 0
drwxr-xr-x 3 1000000000 nfsnobody 21 Oct 21 14:14 registry-storage-project


You have successfuly configured Openshift Docker Registry with Persistent Storage using NFS Share. 

===================================================================================================
Scaling Pods Lab
===================================================================================================
oc login
oc new-project scaling

oc new-app -o yaml https://github.com/jha-deepak9981/simple-webapp-color.git > ~/scaling.yaml ## It will not build or deploy anything, it will create a yaml file with all information

vim ~/scaling.yaml ## search for replica and change it to 3 or any number

oc apply -f ~/scaling.yaml

oc logs -f bc "simple-webapp-color"

watch -n 3 oc get build

oc get pods ## Repeat this command till we get 3 pods active
oc get pods -o wide

oc get service
oc expose service simple-webapp-color --hostname=app1.openshift.com

oc get routes

cat /etc/hosts ## Make entry in host file if DNS is not configured
172.24.0.151    master.openshift.com    master
172.24.0.152    infra.openshift.com     infra
172.24.0.152    app1.openshift.com     app1
172.24.0.153    node1.openshift.com     node1
172.24.0.154    node2.openshift.com     node2

for i in {1..5}; do curl -s \http://app1.openshift.com | grep color; done

oc get dc
oc describe dc simple-webapp-color | grep Replica

oc scale --replicas=5 dc simple-webapp-color ## Scale UP
oc describe dc simple-webapp-color | grep Replica

oc get pods -o wide
oc scale --replicas=2 dc simple-webapp-color ## Scale down
oc get pods -o wide
